{"version":3,"file":"commonHelpers2.js","sources":["../src/js/02-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\r\nimport 'flatpickr/dist/flatpickr.min.css';\r\nimport iziToast from 'izitoast';\r\nimport 'izitoast/dist/css/iziToast.min.css';\r\n\r\nconst inputDate = document.querySelector('#datetime-picker');\r\nconst startBtn = document.querySelector('[data-start');\r\nconst timerDays = document.querySelector('[data-days]');\r\nconst timerHours = document.querySelector('[data-hours]');\r\nconst timerMin = document.querySelector('[data-minutes]');\r\nconst timerSec = document.querySelector('[data-seconds]');\r\n\r\nstartBtn.disabled = true;\r\n\r\nconst options = {\r\n  enableTime: true,\r\n  time_24hr: true,\r\n  defaultDate: new Date(),\r\n  minuteIncrement: 1,\r\n  onClose(selectedDates) {\r\n    if (selectedDates[0] < Date.now()) {\r\n      iziToast.error({\r\n        title: 'Error',\r\n        message: 'Please choose a date in the future',\r\n      });\r\n    } else {\r\n      startBtn.disabled = false;\r\n    }\r\n  },\r\n};\r\n\r\nstartBtn.addEventListener('click', handlerStart);\r\n\r\nfunction handlerStart() {\r\n  startBtn.disabled = true;\r\n  inputDate.disabled = true;\r\n\r\n  const interval = setInterval(() => {\r\n    const currentDate = Date.now();\r\n    const selectedDate = new Date(inputDate.value);\r\n    const difference = selectedDate - currentDate;\r\n\r\n    if (difference < 1000) {\r\n      clearInterval(interval);\r\n    }\r\n\r\n    function convertMs(ms) {\r\n      // Number of milliseconds per unit of time\r\n      const second = 1000;\r\n      const minute = second * 60;\r\n      const hour = minute * 60;\r\n      const day = hour * 24;\r\n\r\n      // Remaining days\r\n      const days = Math.floor(ms / day);\r\n      // Remaining hours\r\n      const hours = Math.floor((ms % day) / hour);\r\n      // Remaining minutes\r\n      const minutes = Math.floor(((ms % day) % hour) / minute);\r\n      // Remaining seconds\r\n      const seconds = Math.floor((((ms % day) % hour) % minute) / second);\r\n\r\n      return { days, hours, minutes, seconds };\r\n    }\r\n    const timer = convertMs(difference);\r\n\r\n    timerDays.textContent = timer.days.toString().padStart(2, 0);\r\n    timerHours.textContent = timer.hours.toString().padStart(2, 0);\r\n    timerMin.textContent = timer.minutes.toString().padStart(2, 0);\r\n    timerSec.textContent = timer.seconds.toString().padStart(2, 0);\r\n  }, 1000);\r\n}\r\n\r\nflatpickr(inputDate, options);"],"names":["inputDate","startBtn","timerDays","timerHours","timerMin","timerSec","options","selectedDates","iziToast","handlerStart","interval","currentDate","difference","convertMs","ms","days","hours","minutes","seconds","timer","flatpickr"],"mappings":"+IAKA,MAAMA,EAAY,SAAS,cAAc,kBAAkB,EACrDC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAW,SAAS,cAAc,gBAAgB,EAClDC,EAAW,SAAS,cAAc,gBAAgB,EAExDJ,EAAS,SAAW,GAEpB,MAAMK,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACjBA,EAAc,CAAC,EAAI,KAAK,IAAG,EAC7BC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EAEDP,EAAS,SAAW,EAEvB,CACH,EAEAA,EAAS,iBAAiB,QAASQ,CAAY,EAE/C,SAASA,GAAe,CACtBR,EAAS,SAAW,GACpBD,EAAU,SAAW,GAErB,MAAMU,EAAW,YAAY,IAAM,CACjC,MAAMC,EAAc,KAAK,MAEnBC,EADe,IAAI,KAAKZ,EAAU,KAAK,EACXW,EAE9BC,EAAa,KACf,cAAcF,CAAQ,EAGxB,SAASG,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CACD,MAAMC,EAAQN,EAAUD,CAAU,EAElCV,EAAU,YAAciB,EAAM,KAAK,SAAQ,EAAG,SAAS,EAAG,CAAC,EAC3DhB,EAAW,YAAcgB,EAAM,MAAM,SAAQ,EAAG,SAAS,EAAG,CAAC,EAC7Df,EAAS,YAAce,EAAM,QAAQ,SAAQ,EAAG,SAAS,EAAG,CAAC,EAC7Dd,EAAS,YAAcc,EAAM,QAAQ,SAAQ,EAAG,SAAS,EAAG,CAAC,CAC9D,EAAE,GAAI,CACT,CAEAC,EAAUpB,EAAWM,CAAO"}